#+TITLE: Computational Complexity

* Overview

[[./img/classes_overview.jpg]]

* $\text{DTIME}$ and $\text{NTIME}$, $\textbf{P}$ and $\textbf{NP}$, $\mathbf{EXP}$ and $\textbf{NEXP}$

From now on we will focus our attention on the class of decidable problems $R=\{L|\exists \text{ Turing machine } M \text{ that decides } L \}$. Considering the languages that can be decided in $O(f(n)), f: \mathbb{N} \rightarrow \mathbb{N}$, we have
- $\text{DTIME}(f(n))=\{L|L\in R, T_M(n)\in O(f(n))\}$, solvable by a deterministic TM.
- $\text{NTIME}(f(n))=\{L|L\in R, NT_M(n)\in O(f(n))\}$, solvable by a nondeterministic TM.

Considering only the languages that can be decided in polynomial time, we have the following complexity classes
- $\textbf{P} = \bigcup_{c\geq 1} \text{DTIME}(n^c)$, problems solvable by a deterministic TM in polynomial time.
- $\textbf{NP} = \bigcup_{c\geq 1} \text{NTIME}(n^c)$, problems solvable by a nondeterministic TM in polynomial time.

Nondeterministic TMs are often devised using a /trail and error/ (or guess and check) approach, where the resulting computation takes the form of a decision tree model.  To check if $w \in L$, the NTM should
1. Guess a /certificate/ (some data) on the tape, in polynomial time.
2. Check the certificate to proove $w \in L$, in polynomial time.

The class $\mathbf{PC}$ collects the languages that can be decided with such NTMs, and it is in fact an alternative definition of $\mathbf{NP}$ since $\mathbf{PC}=\mathbf{NP}$.

We can also define two more classes of problems that deal with higher time resource usage.
- $\textbf{EXP} = \bigcup_{c\geq 1} \text{DTIME}(2n^c)$, solvable by a deterministic Turing machine in exponential time.
- $\textbf{NEXP} = \bigcup_{c\geq 1} \text{NTIME}(2n^c)$, solvable by a non-deterministic Turing machine in exponential time.

* $\textbf{P}$ languages
** Reachability

\begin{equation}
\text{REACHABILITY}=\{(G,s,t)| \exists \text{ a path from node } s \text{ to node } t \text{ in the directed graph } G\} \notag
\end{equation}

\begin{algorithm}[H]
\SetAlgoLined
\KwData{Directed graph $G=(V,E)$ and nodes $s,t$}
\KwResult{$Y$ if there is a path from $s$ to $t$, $N$ otherwise}
 \tcp{Done in constant time w.r.t. input size}
 init an empty queue $Q$\;
 mark node $s$ as $visited$\;
 append $s$ to $Q$\;
 \tcp{At most $|V|$ iterations, visiting all the nodes in $G$}
 \While{$Q$ is not empty}{
  extract node $v$, the first element of $Q$\;
  \If{$v$ is $t$}{
   \Return Y\;
   }
  \tcp{At most $|V|$ iterations, all the the nodes are neighbours of $v$}
  \ForAll{$(v,u) \in E$ s.t. $u$ is not $visited$}{
   mark node $u$ as $visited$\;
   append $u$ to $Q$\;
  }\EndFor
 }
 \Return $N$\;
 \caption{Breadth-first search, in $O(n^2)$ with $n=|V|$}
\end{algorithm}

** Prime

The algorithm below is not polynomial in the /size of the input/: since the input has been encoded in binary, we use $n=\left\lceil \log_2 N \right\rceil$ bits to encode $N$. This means that $N \in O(2^n)$ and the algorithm is exponential w.r.t to the input size. In the early 2000s a far more complex algorithm has been designed to prove that $\text{PRIME} \in \mathbf{P}$.

\begin{equation}
\text{PRIME}=\{<N>|N\text{ is prime}\},\quad <N>\text{ binary encoding of }N \in \mathbb{N} \notag
\end{equation}

\begin{algorithm}[H]
\SetAlgoLined
\KwData{$<N>$}
\KwResult{$Y$ if $N$ is prime, $N$ otherwise}
 \tcp{At most $N$ iterations}
 \ForAll{$k=2$ to $N-1$}{
  \If{$k$ divides $N$}{
   \Return $N$\;
  }
 }\EndFor
 \Return $Y$\;
 \caption{Naive iteration, in $O(N)$}
\end{algorithm}

* $\mathbf{NP-complete}$ languages

A language $L$ is said to be $\mathbf{NP-complete}$ if and only by providing a polynomial-time algorithm to decide $L$ one proves that every language in $\mathbf{NP}$ can be decided in polynomial time.  For the study of  $\mathbf{NP-completeness}$ we need to introduce some useful concepts. 
- Language $L_1$ reduces to language $L_2$ in polynomial time ($L_1 \leq_p L_2$) if there is a /polynomial-time reduction/ $M$ such that $T_M(n) \in O(n^c), \ c>0$.
- A language $L$ is $\mathbf{NP-hard}$ if $L' \leq_p L \ \forall L' \in \mathbf{NP}$.
- $L \in \mathbf{NP-complete} \Rightarrow L \in \mathbf{NP} \wedge L \in \mathbf{NP-hard}$.
- $L \in \mathbf{NP-complete} \wedge L \in \mathbf{P} \iff \mathbf{P} = \mathbf{NP}$. In other words, deciding an $\mathbf{NP-complete}$ problem in polynomial time proves that $\mathbf{P} = \mathbf{NP}$.
- $L_1 \in \mathbf{NP-hard} \wedge L_1 \leq_p L_2 \Rightarrow L_2 \in \mathbf{NP-hard}$.
- Cook's theorem states that $\text{SAT} \in \mathbf{NP-complete}$.

So to prove a language $L$ is $\mathbf{NP-complete}$ it is enough to show that
1. $L \in \mathbf{NP}$.
2. $L \leq_p L'$, where $L' \in \mathbf{NP-hard}$.

** SAT

A CNF (/Conjunctive Normal Form/) is a boolean formula of the form $C_1 \wedge C_2 \wedge \cdots \wedge C_n$, with clauses $C_i=(l_1 \vee l_2 \vee \cdots \vee l_k)$ and literals $l_j$. A CNF is satisfiable if there is a truth assignment $\tau$ that makes $\varphi$ true.

Example: For $\varphi=(x_1 \vee x_2 \vee x_2 \vee \bar{x}_3) \wedge (x_4 \vee \bar{x}_5) \wedge (x_1 \vee \bar{x}_5)$ a truth assignment that satisfies $\varphi$ is $\tau: x_1\rightarrow 1, x_2,x_3,x_4,x_5 \rightarrow 0$.

Consider the decision problem $\text{SAT}=\{\varphi|\varphi \text{ is a satisfiable CNF}\}$. Given a CNF $\varphi$ and a truth assignment $\tau$, we can provide an algorithm that checks if $\tau$ satisfies $\varphi$ in polynomial time.

\begin{algorithm}[H]
\SetAlgoLined
\KwData{A CNF boolean formula $\varphi$ and a truth assignment $\tau$}
\KwResult{$Y$ if $\tau$ satisfies $\varphi$ $N$ otherwise}
 \tcp{At most $m$ iterations, checking all the clauses}
 \ForAll{$C_i$ of $\varphi$}{
  $cvalue = False$\;
  \tcp{At most $c$ iterations, checking all the literals}
  \ForAll{$l_j$ of $C_i$}{
   \If{$l_j = True$}{
    $cvalue = True$\;
    break\;
   }
  }
  \If{cvalue = False}{
   \Return $N$\;
  }
 }
 \Return $Y$\;
 \caption{Naive iterations for $\tau$, in $O(m \cdot n)$ with $m$ clauses and $c$ maximum number of literals in a clause}
\end{algorithm}

However, a CNF with $n$ boolean variables has a total of $2^n$ possible truth assignment, making the overall procedure exponential in time. No polynomial procedure has been devised to date.

Can we get a better result by relying on non-determinism? We can use a /trial and error/ approach with a NTM that, given a CNF $\varphi$ with variables $x_1, \cdots, x_n$
1. Makes a non-deterministic guess $\tau$ for $x_1,\cdots , x_n$, written on the tape using $n$ bits (the i-th bit represents the assignment for $x_i$ ). Each guess takes a different path on the computational tree and writes polynomially many symbols in the tape.
2. Verifies in polynomial time that $\tau$ satisfies $\varphi$, if so accept (otherwise reject).

By providing a NTM that decides $\text{SAT}$, we proved that $\text{SAT} \in \mathbf{NP}$. 

As already said, Cook's theorem states that $SAT \in \mathbf{NP-complete}$, but even simplified versions are still in $\mathbf{NP-complete}$.
- $\text{3-SAT}=\{\varphi | \varphi \text{ is a boolean formula in 3-CNF that is satisfiable}\}$, where 3-CNF is a CNF whose clauses have at most three literals.
- $\text{EXACT-3-SAT}=\{\varphi | \varphi \text{ is a boolean formula in EXACT-3-CNF that is satisfiable}\}$, where EXACT-3-CNF  is a CNF whose clauses have exactly three literals.

** Independent set

Given an undirected graph $G=(V,E)$, $S$ is an /independent set/ in $G$ if and only if there is no edge connecting any pair of nodes in $S$.
We are interested in the decision problem $\text{IS}=\{ (G,K) |G \text{ undirected graph}, \exists S \text{ independent set s.t. |S|} \ge k\}$ is also $\textbf{NP-complete}$. While we can provide an algorithm that checks if $S$ is an independent set of $G$ in polynomial time, the total number of possible sets of nodes for a graph $G$ is  $\sum_{i=k}^{n} \binom{n}{i}$. Our procedure is not polynomial in time and no polynomial procedure has been devised to date.

\begin{algorithm}[H]
\SetAlgoLined
\KwData{Undirected graph $G$, cardinality $k$}
\KwResult{$Y$ if $G$ contains an indipendent set $S$ s.t. $|S| \geq k$, $N$ otherwise}
 \tcp{At most $\sum_{i=k}^{n} \binom{n}{i}$ iterations, checking all the possible sets with at least $k$ nodes}
 \ForAll{Set of nodes $S$ s.t. $|S| \geq k$}{
  \tcp{At most $n(n-1)/2$ iterations, checking all the pairs when $|S|=n$}
  \ForAll{$(u,v) \in S$}{
   \If{$(u,v)$ are connected}{
    break\;
   }
  }
  \Return $Y$\;
 }
 \Return $N$\;
 \caption{Naive iterations, in $O(n^2 \sum_{i=k}^n \frac{n!}{i!(n-i)!})$ with $n$ nodes}
\end{algorithm}

Similarly to $\text{SAT}$, we can also devise a NTM that uses a trial and error strategy. Given an undirected graph $G$ with $n$ nodes and a number $k$
1. For each node $v$ in $G$, non-deterministically decide to write or not $v$ in the tape.
2. Accept if at least $k$ nodes have been written and no two of them are connected (otherwise reject).

By providing a NTM that decides $\text{IS}$, we proved that $\text{IS} \in \mathbf{NP}$.  To proove that $\text{IS} \in \mathbf{NP-hard}$ (and $\mathbf{NP-complete}$) we can provide a polynomial-time reduction for  $\text{EXACT-3-SAT} \leq_p \text{IS}$.

** Vertex cover

Given an undirected graph  $G=(V,E)$, $VC \subseteq V$ is a /vertex cover/ if and only if all the vertices of $G$ are touched by some node in $VC$. We set the decision problem $\text{VCOVER}=\{(G,k)|G \text{ undirected graph }, \exists VC \text{ vertex cover s.t. } |VC| \leq k\}$ and we want to prove $\text{VCOVER}\in \mathbf{NP-complete}$.

For this problem we can rely on one important observation: let  $G=(V,E)$ be an undirected graph and $S \subseteq V$ a set of nodes, then $S$ is an independent set in $G$ if and only if $V\setminus S$ is a vertex cover of $G$.

We first proove that $\text{VCOVER} \in \textbf{NP}$ by devising a NTM that
- Makes a non-deterministic guess of at most $k$ nodes in its tape in polynomial time.
- Verifies in polynomial time that all edges are covered.

To proove that $\text{VCOVER} \in \mathbf{NP-hard}$ we can define a polynomial reduction for $\text{IS} \leq_p \text{VCOVER}$. We must devise a reduction that converts a pair $(G,k)$ to a pair $(G',k')$: if $G$ has an independent set with at least $k$ nodes, then $G'$ has a vertex cover with at most $k'$ nodes (and vice versa). So the reduction constructs $G'=G$ and $k'=|V|-k$ in a way that
- If $G$ has an independent set $S$ with $|S| \geq k$, then (for the previous observation) $V\setminus S$ is a vertex cover of $G$ (and thus of $G'$). And since $|S| \geq k$, then $|VC|=|V \setminus S | \leq |V|-k=k'$.
- If $G'$ has a vertex cover $VC$ with $|VC|<k'$, then $S=V \setminus VC$ is an independent set of $G'$ (and thus of $G$). And since $|VC|<k'$, then $|S|=|v \setminus VC| \geq |V| - k' = k$.

Then we have also proven that $\text{VCOVER} \in \mathbf{NP-complete}$.

** Clique

Given an undirected graph $G=(V,E)$, $C \in V$ is a /clique/ if and only if the nodes in $C$ form a fully connected subgraph in $G$. We consider the decision problem $\text{CLIQUE}=\{(G,k)|G \text{ undirected graph }, \exists C \text{ clique s.t. } |VC| \geq k\}$.

For this problem we can exploit the fact that an independent set $S$ in $G$ corresponds to a clique in a graph $\overline{G}$, with $\overline{G}$ being the complement of $G$ (any pair of nodes $G$ is adjacent iff it's not adjacent in $\overline{G}$).

We first proove that $\text{CLIQUE} \in \textbf{NP}$ by devising a NTM that
- Makes a non-deterministic guess of at lest $k$ nodes in its tape in polynomial time.
- Verifies in polynomial time that all pairs are connected.

To proove that $CLIQUE \in \mathbf{NP-hard}$ we can define a polynomial reduction for $IS \leq_p CLIQUE$. We must devise a reduction that converts a pair $(G,k)$ to a pair $(G',k')$: if $G$ has an independent set with at least $k$ nodes, then $G'$ has a clique with at least $k'$ nodes (and vice versa). So the reduction constructs $G'=\overline{G}$, by copying $|V|$ nodes and adding at most $|V|^2$, and $k'=k$ in a way that
- If $G$ has an independent set $S$ with $|S| \geq k$, then (for the previous observation) $S$ is a clique of $G'$  with at least $k=k'$ nodes in $G'$.
- If $G'$ has a clique $C$ with at least $k'$ nodes, then no distinct nodes in $G$ are connected in $G'$ and $C$ is an independent set with at least $k'=k$ nodes in $G$.

** Binary integer programming

We consider now an optimization problem. Consider a system of inequalities of the form

   \begin{equation}
\begin{cases}
a_{11} \cdot x_1 + a_{12} \cdot x_2 + \cdots a_{1n} \cdot x_n \leq b_1 \\
a_{21} \cdot x_1 + a_{22} \cdot x_2 + \cdots a_{2n} \cdot x_n \leq b_2 \\
\cdots \\
a_{m1} \cdot x_1 + a_{m2} \cdot x_2 + \cdots a_{mn} \cdot x_n \leq b_m
\end{cases}
\notag
\end{equation}		

Does it have a solution with $x_1, \cdots, x_n \in \{0,1\}$? In other words, given a matrix $A \in \mathbb{Z}^{m \times n}$ and a vector $\overline{b} \in \mathb{Z}^m$ is there are vector $\overline{x} \in \{0,1\}^n$ such that $A \cdot \overline{x} \leq \overline{b}$? In this setting we define the problem $\text{BIP}$ (Binary Integer Programming)

\begin{equation}
\text{BIP} = \{(A,\overline{b})| A \in \mathbb{Z}^{m \times n},\ \overline{b} \in \mathb{Z}^m, \ \exists  \overline{x} \in \{0,1\}^n s.t. A \cdot \overline{x} \leq \overline{b}\} \notag
\end{equation}

We first prove that $\text{BIP} \in \textbb{NP}$ by devising a NTM that
- Makes a nondeterministic guess of  $0,1$ values for each variable in $\overline{x}$, each guess takes $n$ steps (done in polynomial time).
- Checks that all $m$ inequalities are satisfied in polynomial time.

To proove $\text{BIP} \in \textbf{NP-hard}$ we provide a reduction for $\text{EXACT-3-SAT} \leq_{p}\text{BIP}$. Such a reduction should convert, in polynomial time, an EXACT-3-CNF to a system of inequalities (and viceversa) in a way that the CNF is satisfiable iff the system admits solutions. We procede with an example to explain the logic.

Consider a EXACT-3-CNF $\varphi = (x_1 \vee x_2 \vee \bar{x}_3) \veewedge (\bar{x}_2 \vee x_3 \vee \bar{x}_4)$.
- From the boolean variables $x_i$ of $\varphi$ we can set corresponding arithmetic variables $y_i$ for the system, such that if  $x_i=True \rightarrow y_i=1$, $x_i=False \rightarrow y_i=0$. Then we will have the arithmetic variables $y_1,y_2,y_3,y_4$.
- $\varphi$ is satisfiable iff each clause is true, so at least one literal in each clause must be true. We can construct for each clause an inequality such that if its literal is of the form $x_i \rightarrow y_i$, $\bar{x_i} \rightarrow (1-y_i)$, and the resulting sum should be at least 1. The result is the following system of inequalities

\begin{equation}
\begin{cases}
y_1+y_2+(1-y_3) \geq 1\\
(1-y_2)+y_3+y_4 \geq 1
\end{cases}
\notag
\end{equation}

The instances of $\text{BIP}$ take the form of  $\leq$ inequalities with one constant on the right, but it is a simple matter of arithmetics to set the new system in such a form.  The system is constructed in polynomial time: $m$ inequalities are constructed with at most $n+1$ coefficients.

Such a procedure is indeed a reduction that works in both directions.
- If $\varphi$ is satisfiable then there is a truth assignment $\tau$ that makes $\varphi$ true: each clause of $\tau$ has at least one true literal, so at least one of the expressions of the form $y_i$ or $(1-y_i)$ must be one and the inequality is satisfied. This holds for every inequality in the system.
- If our system has a solution, then there is an assignment for each $y_i$ that satisfies all the inequalities. In such an assignment, at least one of the expressions of the form  $y_i$ or $(1-y_i)$, and so its corresponding literal in its clause. This holds for all the clauses of $\tau$.

Also the more general version of the problem $\text{IP} = \{(A,\bar{b})|A \in \mathbb{Z}^{m \times n}, \bar{b} \in \mathbb{Z}^m\} \notag \in \textbf{NP-complete}$.

** Vertex coloring

Given an undirected graph $G=(V,E)$ and $k \in \mathbb{Z}$, a /k-coloring function/ $f: V \rightarrow \{1,2,\dots,k\}$ assigns a color to each node so that $f(u) \neq f(v), \forall \{u,v\} \in E$: the result would be a graph where no pair of nodes with the same color are touching. We are interested in solving the following problem

\begin{equation}
\text{VCOL} = \{(G,k)|G \text{ is an undirected graph admitting a k-coloring}\} \notag
\end{equation}

First, $\text{VCOL} \in \texbf{NP}$ since we can devise a NTM that
- Guesses a coloring for each node. If the NTM encodes $k$ colors using $||k||$ bits, then for $n$ nodes the guess takes $O(||k|| \cdot n)$.
- Checks that the guess provides a k-coloring in $O(|E|)$.

To proove $\text{VCOL} \in \textbf{NP-hard}$ we provide a reduction for $\text{EXACT-3-SAT} \leq_{p}\text{VCOL}$. Such a reduction should convert, in polynomial time, an EXACT-3-CNF to a pair $(G,k)$ (and viceversa) in a way that the CNF is satisfiable iff $G$ admits a $k$ coloring. We procede with an example to explain the logic.

We first construct a graph $G$ with three nodes: $T$ (with color $true$), $F$ (with color $false$) and $B$ (with color $base$). For each variable $x_i$ of $\varphi$, we add two nodes and connect them to $B$: one labeled $x_i$, the other labeled $\bar{x}_i$. The color $x_i$ and $\barc{x}_i$ must be either $true$ or $false$, and since they can't have the same color they are also connected.

[[./img/vcol_basegraph.jpg]]

We need to model the fact that some literals make certain clauses true, and to do so we introduce the OR operation through a triangle scheme. The scheme receives as input two literals $x_a$ and $x_b$ and gives the result in the node $x_c$
- If both $x_a$ and $x_b$ are colored $false$, then the intermediate nodes must be $true$ and $base$. So $x_c$ must be $false$.
- If either $x_a$ or $x_b$ is colored $true$, then there is a coloring for the intermediate nodes with one $false$ and the other $base$. So $x_c$ must be true.

[[./img/vcol_or.jpg]]

Such a construction can be combined to compute the value of a clause of three literals. To force each clause to be $true$, we just need to connect its output node to $F$ and $B$.

[[./img/vcol_complete.jpg]]

The described procedure is a reduction in both directions.
- If $\varphi$ is satisfiable then there is a truth assignment $\tau$ that makes $\varphi$ true. For every assignment $\tau(x_i)$, nodes $x_i$ and $\bar{x_i}$ are colored accordingly to the assigned value and respect the 3-coloring. Finally, since each clause in $\varphi$ must be true, the output of a 3-input OR can be colored in such a way that the output note is colored $true$.
- If $G$ has a 3-coloring then nodes $x_i$ and $\bar{x}_i$ have different colors (either $true$ or $false$). Also, for each clause the output of the circuit must be $true$ since it is connected to $F$ and $B$. Finally, the clause output is $true$ only if one of its input nodes is $true$ (and vice versa, if its input are only $false$ then the output is $false$, which is impossible).

The reduction that we just described uses only 3 colors, in fact also $\text{3-VCOL} \in \mathbf{NP-complete}$.
\begin{equation}
\text{3-VCOL} = \{G|G \text{ is an undirected graph admitting a 3-coloring}\} \notag
\end{equation}

* $\mathbf{coNP}$ and $\text{FACTOR}$

We consider now the problem $\text{UNSAT}=\{\varphi | \varphi \text{ is a non-satisfiable boolean formula in CNF}\}$. By trying to prove that $\text{UNSAT}$ we might be tempted to follow the method used for $\text{SAT}$ and devise a NTM that
- Guesses a truth assignment $\tau$ for $\varphi$ in polynomial time.
- Checks that $\tau$ /does not/ satisfy $\varphi$, in which case accepts (or rejects).

However, the NTM we just provide doesn't decide $\text{UNSAT}$: the CNF $\varphi$ might be
- Not satisfiable :: In which case any branch of the computational tree leads to an accepting state, and the NTM correctly accepts $\varphi$.
- Satisfiable :: In which case some branches still lead to a $\tau$ that doesn't satisfy $\varphi$, and the NTM wrongly accepts $\varphi$.

In fact, the devised NTM guesses a certificate to answer "No" rather than "Yes": while acceptance requires the /exististence/ of a path to accept, rejection requires /all/ paths to be rejecting. This asymmety between acceptance and rejection is somehow similar to the one in $\text{RE}$ languages and their complements.

After this introduction, we can define the class of languages $\textbf{coNP} = \{ L | \bar{L} \in \textbf{NP}\}$ with an important observation: $\mathbf{coNP}$ is /not/ the complement of $\textbf{NP}$, is the set of /complements/ of $\textbf{NP}$ languages. In fact, there are languages $L$ such that $L \in \textbf{NP} \wedge L \in \textbf{coNP}$.

Another open question is if $\textbf{NP}=\textbf{coNP}$, and we can have some insights on this claim knowing that
- $\mathbf{NP} = \textbf{coNP} \Leftrightarrow \exists L \in \mathbf{NP-complete} \wedge L \in \mathbf{coNP}$, no such language has been found yet.
- $\textbf{P} \subseteq \textbf{NP} \cap \textbf{coNP}$, this and previous statement imply that if $\textbf{P}=\textbf{NP}$ then $\textbf{NP}=\textbf{coNP}$ (not the opposite).

An example of language both in $\textbf{NP}$ and $\textbf{coNP}$ is $\text{FACTOR}$. The common belief is that $\text{FACTOR} \notin \mathbf{P}$ (and $\text{FACTOR} \notin \textbf{NP-complete}$).

\begin{equation}
\text{FACTOR} = \{(N,k) | N \in \mathbb{N} \wedge M > k, \forall M \text{prime factor of  } N \} \notag
\end{equation}

* $\text{DSPACE}$ and $\text{NSPACE}$,  $\textbf{LOGSPACE}$ and $\textbf{NL}$

We are now consider the /space/ requirement of TMs. For convenience, we are going to consider only TMs (or NTMs) with just a read-only /input tape/ and a read-write /working tape/. For such a TM we define $S_M(n)$ as the maximum number of cells visited on the working tap when executed with input of lenght $n$ (for NTM whole the max among all computation branches). Considering the languages that can be decided in $O(f(n)), f: \mathbb{N} \rightarrow \mathbb{N}$, we have
- $\text{DSPACE}(f(n))=\{L|\exists T_M \text{ deciding } L, S_M(n) \in O(f(n))\}$, solvable by a deterministic TM using space in the order of $f(n)$.
- $\text{NSPACE}(f(n))=\{L|\exists NT_M \text{ deciding } L, S_M(n) \in O(f(n))\}$, solvable by a non-deterministic TM sing space in the order of $f(n)$.

Considering the languages that can be decided with a logarithmic amount of space, we have
- $\textbf{LOGSPACE} = \text{DSPACE}(\log n)$, solvable by a deterministic Turing machine
- $\textbf{NL} = \text{NSPACE}(\log n)$, solvable by a non-deterministic Turing machine

For sure $\textbf{LOGSPACE} \subseteq \textbf{NL}$, but is $\textbf{LOGSPACE}=\textbf{NL}$? This is still an open question
- A language $L\in \textbf{NL-complete} \iff L \in \textbf{NL} \wedge L' \leq_L L, \forall L'\in \textbf{NL}$, where  $\leq_L$ stands for logspace reduction.
- We know that $\textbf{LOGSPACE} = \textbf{NL} \iff \exists L | L \in \textbf{LOGSPACE} \wedge L \in \textbf{NL-complete}$.

For example $L_{01}=\{0^n1^n|n \geq 0\} \in \mathbf{LOGSPACE}$. We can devise a TM that takes an input $w$ and accepts if $w$ is empty, otherwise scans left-to-right and increments a counter for each 0 found. When a 1, the TM keeps scanning but increments a second counter for each 1 found: if at the two counters are the same, accept, otherwise reject. For an input of lenght $n=|w|$ each counter, encoded in binary, takes $O(\log_2 n)$ cells, so $S_M(n) \in O(\log_2 n)$.

\begin{algorithm}[H]
\SetAlgoLined
\KwData{Input string $w$}
\KwResult{$Y$ if $w=0^n1^n$, $N$ otherwise}
 \If{w=\{\}}{
  \Return $Y$\;
 }
 $zero\_counter=0$\;
 \While{$input\_cell$ is 0}{
  $zero\_counter=zero\_counter + 1$\;
  read next $input\_cell$\;
 }
 $one\_counter=0$\;
 \While{$input\_cell$ is 1}{
  $one\_counter=one\_counter + 1$\;
  read next $input\_cell$\;
 }
 \eIf{$input\_cell=\_$ and $zero\_counter=one\_counter$}{
  \Return $Y$\;
 }{
  \Return $N$\;
 }
 \tcp{Only two counters are used, each at most $n=|w|$, encoded in binary so $O(\log_2 n)$}
 \caption{Turing machine for $L_{01}$, $S_M(n) \in O(\log_2 n) \Rightarrow L_{01} \in \mathbf{LOGSPACE}$}
\end{algorithm}

An example of $\mathbf{NL}$ language (in fact $\mathbf{NL-complete}$) is  $\text{REACHABILITY} = \{(G,s,t)|\text{ directed graph } G \text{ has a path from } s \text{ to } t\}$. We can devise a NTM that stores into the working tape a pointer with the position of the input string in the input tape: this pointer would take only $O(\log_2 |w|)$ cells instead of holding the entire string in $O(|w|)$.

\begin{algorithm}[H]
\SetAlgoLined
\KwData{Directed graph $G=(V,E)$ and nodes $s,t$}
\KwResult{$Y$ if there is a path from $s$ to $t$, $N$ otherwise}
 $p$ points to $s$, store $p$ in the working tape\;
 $counter=1$, store $counter$ in the working tape\;
 \#LABEL\;
 \If{$p$ points to $t$}{
  \Return $Y$\;
 }
 Guess a point $v$ in $G$, $p'$ points to $v$\;
 \If{$p$ points to a node with no edge to the node pointed by $p'$}{
  \Return $N$\;
 }
 $p=p'$\;
 $counter=counter+1$\;
 \eIf{counter \leq |V|}{
  \textbf{goto} \#LABEL\;
 }{
  \Return $N$\;
 }
 \caption{Algorithm for $\text{REACHABILITY} \in \mathbf{NL}$}
\end{algorithm}

* Savitch's Theorem

We have previously devised a TM that decides $\text{REACHABILITY} = \{(G,s,t)|\text{ directed graph } G \text{ has a path from } s \text{ to } t\}$ in $O(\log_2 n)$. However, we can proove that $\text{REACHABILITY} \in \text{DSPACE}((\log_2 n)^2)$ using recursion: note that a path from nod $s$ to node $t$ exists iff there is a node $u$ between them such that $s$ and $t$ reach $u$ in half the steps.

\begin{algorithm}[H]
\SetAlgoLined
\KwData{Directed graph $G=(V,E)$, nodes $s,t$ and an integer $k$}
\KwResult{$Y$ if there is a path from $s$ to $t$ requiring at most $k$ steps, $N$ otherwise}
 \tcp{Does $s$ reach $t$ in zero steps?}
 \If{$k=0$}{
  \eIf{$s=t$}{
   \Return $Y$\;
  }{
   \Return $N$\;
  }
 }

 \tcp{Does $s$ reach $t$ in at most one step?}
 \If{k=1}{
  \eIf{$s=t$ or $(s,t) \in E$}{
   \Return $Y$\;
  }{
   \Return $N$\;
  }
 }

 \tcp{Look for a middle node}
 \ForEach{$u \in V$}{
  \eIf{$\text{exists-path}(G,s,u,\left\lfloor k/2 \right\rfloor)$ and $\text{exists-path}(G,s,u,\left\lceil k/2 \right\rceil)$}{
   \Return $Y$\;
  }{
   \Return $N$\;
  }
 }
 \Return $N$\;
 \caption{\text{exists-path}}
\end{algorithm}

Each calls requires at most  $\log_2 |V| \in O(log_2 n)$ cells, since the space used by the previous two calls is freed up, and no more than $\log_2 |V|$ calls are made so overall the algorithm performs in $O(\log_2 n)$.

This reasoning is generalized to any language in $\mathbf{NSPACE}$ by the /Savitch's theorem/. When considering space, there is in fact not much difference between deterministic and non-deterministic Turing machines: unlike time, space can be reused.

\begin{equation}
\text{NSPACE}(f(n)) \subseteq \text{DSPACE}(f^2(n)) \quad \forall n \in \mathbb{N}, \forall f:\mathbb{N} \rightarrow \mathbb{N}| f(n) \geq \log n \notag
\end{equation}

As a corollary of Savitch's theorem, the difference between space required by TMs and NTMs is none in polynomial space.

\begin{equation}
\mathbf{PSPACE}=\bigcup_{c \geq 1} \text{DSPACE}(n^c),\quad  \mathbf{NSPACE}=\bigcup_{c \geq 1} \text{DSPACE}(n^c),\quad \mathbf{PSPACE} = \mathbf{NPSPACE} \notag
\end{equation}

* Oracles

It is quite common for algorithms to rely on /subroutines/ to solve problems, and in fact TMs can rely on /oracles/ to solve specific types of problems. Considering the problem $\text{VCOVER}$, we might want to find the optimal (smallest) vertex cover for a given graph. 

\begin{equation}
\text{MIN-COVER}=\{(G,k)|G \text{ is an undirected graph and } k \text{ is the size of its smallest vertex cover}}\} \notag
\end{equation}

This means devising  a procedure that verifies that there is
1. A vertex cover of size at most $k$ ($\text{VCOVER} \in \textbf{NP}$).
2. No vertex cover of size $k-1$ ($\overline{\text{VCOVER}} \in \textbf{coNP}$). If we believe that $\textbf{NP} \neq \textbf{coNP}$ then $\overline{\text{VCOVER}} \notin \textbf{NP}$.

So we can rephrase the problem as $\text{MIN-COVER}=\{(G,k)|(G,k) \in \text{VCOVER} \wedge (G,k-1) \notin \text{VCOVER}\}$. Given an oracle ~check-vcover~ that decides $\text{VCOVER}$, we following procedure requires only a polynomial number of steps to decide $\text{MIN-COVER}$.
1. Let ~result1 = check-vcover(G,k);~
2. Let ~k' = k-1;~
3. Let ~result2 = check-vcover(G,k');~
4. If ~result1 = True~ and ~result2 = True=~ then ~Accept~, otherwise ~Reject~

A TM with an oracle for $L$ has an additional oracle tape (read-write), and additional states $q_?, q_{yes}, q_{not}$: to ask to the oracle if $w \in L$, the TM writes $w$ in the oracle tape and moves to $q_?$: if the next state is $q_{yes}$, then $w \in L$.

We can now define additional complexity classes: let $C$ be some complexity class
- $\textbf{P}^C$ contains the languages that can be decided in polynomial time by a TM with an oracle for some language $L \in C$.
- $\textbf{NP}^C$ contains the languages that can be decided in polynomial time by a NTM with an oracle for some language $L \in C$.

So $\text{MIN-VCOVER} \in \texbf{P}^\textbf{NP}$. Note that
- $\textbf{NP} \subseteq \textbf{P}^\textbf{NP}$ and $\textbf{coNP} \subseteq \textbf{P}^\textbf{NP}$.
- A /polynomial time hierarchy/ is an infinite hierarchy of complexity classes that generalizes $\mathbf{NP}$ and $\mathbf{co-NP}$ using oracles.

* Search problems

Oracles are exactly the kind of tools needed to undestand the complexity of /search problems/: we can transfer the knowledge we have about a decision problem to its search version. Consider search problem

\begin{equation}
\text{FMIN-VCOVER}=\min\{|VC|| VC\text{ is a vertex cover of }G\}\notag
\end{equation}

We can devise a $O(|V|)$ algorithm that uses the $\text{VCOVER}$ oracle to solve the problem. Let $\mathbf{FP}$ be the class of search problems solvable by a TM with an output tape in polynomial time, than $\text{FMIN-VCOVER \in \mathbf{FP}^{\mathbf{NP}}$.

\begin{algorithm}[H]
\SetAlgoLined
 $k = |V| - 1$\;
 \While{(G,k) \in \text{VCOVER}}{
  k = k -1
 }
 write $k$ in the output tape
\end{algorithm}

We can actually improve the previous algorithm by employing binary search and reducing the number of steps from $O(|V|)$ to $O(\log_2 |V|)$. This improved algorithm proves thats $\text{FMIN-VCOVER} \in \textbf{FP}^{\textbf{NP} \left[ \log_2 n \right]}$, that is the class of search problems that can be solved in polynomial time with $O(\log_2 n)$ calls to an oracle for a $\textbf{NP}$ language.

** The Travelling Salesman Problem

Given a weighted undirected graph $G=(V,E,\lambda)$, with a weight function $\lambda: E \rightarrow \mathbb{N}$, we consider the /cost/ of a path to be the sum of its traversed edges. In the /Functional Travelling Salesman Problem/ (FTSP) the goal is to visit all the nodes of $G$ exactly ones, through what is called an /Hamiltonian path/ that has a minimum cost.

To solve this search problem we might consider using an oracle for the related decision problem $TSP \in \mathbf{NP}$.

\begin{equation}
\text{TSP} = \{(G,K)|\text{ weighted, undirected graph } G \text{ with an Hamilton cycle costing at most } k\} \notag
\end{equation}

\begin{algorithm}[H]
\SetAlgoLined
 \tcp{$m$ bits to encode each cost + $|E|$ bits to encode each edge $\rightarrow k \in O(2^{m+|E|})$}
 $k$ is the sum of the cost of all edges in $G$\;
 \If{(G,k) \notin \text{TSP}}{
  write $\bot$ in the output tape and halt\;
 }
 \While{(G,k) \in \text{TSP}}{
  $k=k-1$\;
 }
 write $k+1$ in the output tape\;
\end{algorithm}

A better algorithm relies again on binary search, resulting in $\text{FTSP} \in \textbf{FP}^{\textbf{NP}}$.

\begin{algorithm}[H]
\SetAlgoLined
 $a = 0$\;
 \tcp{$m$ bits to encode each cost + $|E|$ bits to encode each edge $\rightarrow b \in O(2^{m+|E|})$}
 $b$ is the sum of the cost of all edges in $G$\;
 \tcp{ binary search, so number of iterations $\in O(\log_2 2^{m+|E|})=O(m+|E|)$}
 \While{a \leq b}{
  $k = \left\lfloor (a+b)/2 \right\rfloor$\;
  \eIf{$(G,k-1) \in \text{TSP}$}{
   \tcp{Cost is striclty smaller than middle point, move interval to the left}
   $b = k-1$\;
  }{
   \eIf{(G,k) \in \text{TSP}}{
    \tcp{$k$ is the minimum cost}
    write $k$ in the output tape and halt\;
   }{
    \tcp{Cost is striclty larger than middle point, move interval to the right}
    $a = k+1$\;
   }
  }
 }
 write $\bot$ in the output tape\;
\end{algorithm}

Finally, since $\text{TSP} \in \textbf{NP-complete}$ also the specific $\text{FTSP} \in \textbf{NP-complete}$.

** Restaurant

Given a set of $k$ tables $T=\{1, \cdots, k\}$, a set of $n$ people $P=\{1,\cdots,n\}$ and for each person a list $L_i, i \in P$ of guests that person $i$ doesn't like. The problem of verifying if a given configuration is valid can be formalized as

\begin{equation}
\text{RESTAURANT}=\{(P,T,L_1,\cdots,L_n)|(P,T,L_1,\cdots,L_n) \text{ is a valid input which has a table assignment}\} \notag
\end{equation}

For the problem $\text{RESTAURANT}$ we can devise a NTM that
- Guesses for each person $i$ a table $t_i$ in polynomial time.
- Checks for each guess that no person in $L_i$ is in $t_i$ in polynomial time, if so accepts (otherwise rejects).

Recall the [[Vertex coloring][Vertex Coloring]] problem. We can devise a procedure that constructs from $(G,k), G=(V,E)$ a string $(P,T,L_1,\cdots,L_n)$ such that $(G,k)$ has a k-coloring iff there is a table assignment for  $(P,T,L_1,\cdots,L_n)$.
- $P=V$.
- For each $i$, construct $L_i$ as the set of nodes of $G$ connected to node $i$.
- $T=\{1,\cdots, k'\}$ for $k'=k$ colors, that requires linear time in $k$. However $k$ is an integer encoded with $m$ bits, so in the worst case $k=2^m -1$ and the procedure requires $O(2^m)$.

Still we can devise a polynomial procedure that, before constructing the string as mentioned sets $k'=|V|$ if $k \geq |V|$. It is equivalent to the case in which we might have more colors than nodes a trivial k-coloring (one color per node): we can simply reduce the colors to the number of nodes, and consequently the resulting list $L_i$ will have a maximum size $|V|$.

Such a procedure is indeed a reduction
- If $G$ has a k-coloring $\mu$ (as said, with $k \leq |V|$), consider the function $\tau = \mu$: while $\mu$ assigns a color to each node, $\tau$ assigns a table to each guest. We have then that $\mu(i) \neq \mu(j), \forall \{i,j\} \in E$ and $\tau(i) \neq \tau(j), \forall i,j \in P$, since $\exists \{i,j\} \in E \Leftrightarrow i \in L_j \wedge j \in L_i$.
- If  $(P,T,L_1,\cdots,L_n)$ has a table coloring $\tau$, then $i \in L_j, j \in L_i \Rightarrow \{i,j\} \in E \Rightarrow \tau(i) \neq \tau(j)$ so $\mu = \tau$ is also a k-coloring for $G$.

** Labels

Given an undirected graph $G=(V,E)$, two integers $k,k'$ and a set integer /labels/ $X$, can we assign a label $p_v \in X$ to each node $v \in V$ such that
- $\sum_{v \inV} p_v < k$, so the sum of the labels is strictly smaller than $k$.
- $\sum_{e \in E} C_e \geq k'$, so the cost of each edge is at least $k'$, where the cost of an edge $C_e=\max\{p_u,p_v\},\e=\{u,v\} \in E$.

An input for such a problem can be encoded as $(G,k,k',X)$,  and labeling as a function $l: V \rightarrow X$ such that $\sum_{v \in V} l(v) < k$ and $\sum_{\{u,v\} \in E} \max\{l(u),l(v)\} \geq k'$. The resulting problem can be formalized as

\begin{equation}
\text{LABELS} = \{(G,k,k',X)|(G,k,k',X) \text{ is a valid input that has a labeling}\} \notag
\end{equation}

For the problem $\text{LABELS}$ we can devise a NTM that decides the language in polynomial time.
- Guesses for each node $v \in V$ a label $p_v \in X$, if $X$ is encoded using $m$ bits then labels take $|V| \cdot m$ cells.
- Check $\sum_{v \in V} l(v) < k$, that requires summing $|V|$ numbers.
- Check $\sum_{\{u,v\} \in E} \max\{l(u),l(v)\} \geq k'$, that requires summing $|E|$ numbers.

So $\text{LABELS} \in \mathbf{NP}$, but is $\text{LABELS} \in \mathbf{NP-complete}$? To prove it, we can show that $\text{VCOVER} \leq \text{LABELS}$.
- The first sum $\sum_{v \inV} p_v < k$ can be seen as counting the chosen nodes of a vertex cover.
- The second sum $\sum_{e \in E} \max\{p_u,p_v\},\e=\{u,v\} \in E$ can be seen as counting how many edges are "touched" by the chosen nodes.

Thus, given a string $G=(V,E)$ we can construct a string $(\bar{G},\bar{k},\bar{k}',X)$ such that $G$ has a vertex cover of size at most $k$ iff  $(\bar{G},\bar{k},\bar{k}',X)$ has a labeling, so
- $\bar{G}=G$, $X=\{0,1\}$
- $\bar{k}=k+1$, since the first sum is strictly smaller than $\bar{k}$.
- $\bar{k}' = |E|$, since the second sum counts all the edges.

Such a procedure is polynomial, since we are just copying $G$ and counting nodes and edges of $G$, and a proper reduction since
- If $(G,k) \in \tex{VCOVER}$, then $G$ has a vertex cover of size at most $k$. Let the labeling function $l(v)=1$ if $v \in VC$ ($l(v)=0$ otherwise), the first sum is strictly less than $\bar{k}$: $\sum_{v \in V} l(v)  = |VC| \leq k < \bar{k}$. The second sum $\sum_{\{u,v\} \in E} \max\{l(u),l(v)\} = \bar{k}'=|E|$, since the cost of each edge is 1.
- If $l$ is a labeling of  $(\bar{G}, \bar{k}, \bar{k}', X)$, then let $VC$ be the set of all nodes $v \in \bar{G}$ such that $l(v) = 1$. With $X=\{0,1\}$, the first sum $\sum_{v \in V} l(v) = |VC| \leq k < \bar{k}$. And since  $X=\{0,1\}$,  $\sum_{\{u,v\} \in E} \max\{l(u),l(v)\} = \bar{k}'=|E|$. So $VC$ is a vertex cover.

Consider now the search problem $\text{MAX-LABELS}$: given an undirected graph $G$ an integer $k$ and a set integer /labels/ $X$, what is the largest $k'$ such that $(G,k,k',X) \in \text{LABELS}$? Using an oracle $\text{LABELS}$, we can solve the problem in polynomial-time by devising a TM that takes $(G,k,X)$.

\begin{algorithm}[H]
\SetAlgoLined
 $x=\max(X)$\; $a=0$\; $b=|E| \cdot x$\;
 \While{a <b}{
  $k'=\left\lfloor (a+b)/2 \right\rfloor$\;
  \eIf{$(G,k,k'+1,X) \in \text{LABELS}$}{
    a = k'+1\;
   }{
     \eIf{$(G,k,k') \in \text{LABELS}$}{
        write $k$ and halt\;
      }{
        b = k' -1\;
      }
   }
 }
 write $\bot$
\end{algorithm}

The algorithm works in $O(log_2 C)$, where $C=|E| \cdot x$. The number $C$ requires at most $|E|+m$ bits, where $m$ bits are used to encode $x$, so $C \in O(2^{|E|+m})$. We conclude, since the algorithm works in $O(|E|+m)$ wrt the size of the input, that $\text{MAX-LABELS} \in \mathbf{FP}^\mathbf{NP}$.


